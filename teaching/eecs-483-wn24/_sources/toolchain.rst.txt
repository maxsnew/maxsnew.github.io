.. -*- mode: rst -*-

.. _toolchain:

Software Toolchain [#]_
=======================

In this course, we will be using `OCaml <https://ocaml.org/>`_ as the main
programming language. We will be working with multi-file projects, built using
`dune <https://dune.build/>`_ and `GNU make
<https://www.gnu.org/software/make/manual/make.html>`_.  The projects will make
use of various external libraries, and involve automated building and
testing. The default OCaml version for this class is ``5.1.0``.  If you don't
have a working OCaml framework (or your OCaml version is different from the one
used below), please allocate **at least 2 hours** for going through this setup
document, as some of the software packages listed required for our class will
take quite a while to install.

..
   .. caution:: 

      The compiler we build targets the x86 64-bit processor architecture, which is
      commonly available on Intel and AMD based computers. **If you have a new
      Apple M1 laptop, please contact the course staff for help.**

 ..
   Even if you have taken YSC2229 and have OCaml installed, **please, make sure
   check the intructions below on installing LLVM and Clang** in your operating
   system.

OCaml
-----
   

    First, we need to install all the software necessary for fully fledged
    OCaml development. 

Updating OCaml
--------------

    
.. admonition:: Note

   If you already have some version of `opam` installed in your system, but
   your OCaml version is older than ``5.1.0`` (you can check it by executing
   ``ocamlc --version``), please, update your set up and install the necessary
   packages as follows::

      opam update; opam upgrade
      opam switch create 5.1.0
      eval $(opam env)
      opam install -y dune utop num menhir ocamlformat ocamlformat-rpc ocaml-lsp-server
      opam user-setup install

   Alternatively, if you don't have a working ``opam`` and OCaml, please,
   follow the instructions below.

Installing OCaml from Scratch on Apple's macOS
----------------------------------------------

OCaml is well-supported in macOS, so the installation process is fairly
straightforward.

1. Install the `Homebrew package manager <https://brew.sh/>`_ for macOS.

2. Install the following system packages using Homebrew::

     brew install make m4 gcc pkg-config fswatch

3. Next, install the ``opam`` package manager for installing
   and maintaining different OCaml libraries. Execute the following
   lines from the terminal::

    brew install opam
    opam init -y --compiler=5.1.0
    eval $(opam env)
    opam install -y dune utop num menhir user-setup ocamlformat ocamlformat-rpc ocaml-lsp-server
    opam user-setup install

4. Once done, add the following line to your ``~/.bashrc``, ``~/.zshrc``, and/or ``~/.profile``
   files (if they exist, otherwise create the file as appropriate for your shell, *e.g.*, ``~/.bashrc``)::

    eval $(opam env)   

5. Close your terminal window and start a new one.

   To check that your OCaml is correctly installed, run ``ocamlc --version``
   from the terminal. You should get the output ``5.1.0``, which is the version
   of the OCaml compiler we have just installed.

   
Installing OCaml from Scratch on MS Windows 10 
-----------------------------------------------

Unfortunately, the OCaml infrastructure is not supported well on
Windows (natively), therefore developing large multi-file projects in
it is problematic. To circumvent this issue, we suggest running OCaml
and the related software using `Windows Subsystem for Linux
<https://docs.microsoft.com/en-us/windows/wsl/install-win10>`_, a
utility that allows to run a distribution of Linux within your Windows
10 system. This setup takes a large number of steps, but once you're
done with it, you'll have a premium support for OCaml, and also a
fully functional Linux distribution installed on your machine.

1. First, let us enable WSL and install a Linux distribution. The
   detailed steps are given in `this online tutorial
   <https://solarianprogrammer.com/2017/04/15/install-wsl-windows-subsystem-for-linux/>`_.
   Don't forget the password for the Linux account you've just
   created: you will need it to install some software. At the end of
   this step, you should be able to run a "bare-bone" Ubuntu Linux
   terminal as an application within your Windows system. In my case, it
   looks as follows.

.. image:: ../resources/howto/ubuntu.png
   :width: 820px
   :align: center

2. You can access your Windows home folder from WSL Linux via tha path
   ``/mnt/c/Users/YOURNAME/`` where ``YOURNAME`` is your Windows user
   name. It is convenient to make a symbolic link for it, so you could
   access it quickly, for instance, calling it ``home``. This is how
   you create such a link::

     cd ~
     ln -s /mnt/c/Users/YOURNAME/ home

   Now you can navigate to you Windows home folder via ``cd ~/home`` and to
   your Linux home folder via ``cd ~``.

   Steps 3-4 are optional and are only required if you're planning to use Emacs.

3. You might want to install a graphical shell for the Linux
   distribution running in WSL. `This article
   <https://solarianprogrammer.com/2017/04/16/windows-susbsystem-for-linux-xfce-4/>`_
   provides detailed instructions on how to do so. Here are some
   comments:

   * You don't have to install Firefox in WSL Linux, as you can use
     your Windows browser instead.

   * The required graphical XServer shell (run separately from
     Windows) can be downloaded from `this resource
     <https://sourceforge.net/projects/vcxsrv/>`_.

   * To run Linux with the graphical mode, you will `always` have to
     first run the XServer, and then the Ubuntu shell, in which you
     will have to type ``xfce4-session``. The Ubuntu window will have
     to stay running as long as you use Linux.
     
   If the Linux image appears to be somewhat "blurred", here's how to fix it:

   * First, add the following lines at the end of the file
     ``~/.bashrc`` in your Linux home folder::

      export GDK_SCALE=0.5
      export GDK_DPI_SCALE=2          

     This can be done using the ``nano`` editor, similarly to how it
     is done in  `this tutorial <https://solarianprogrammer.com/2017/04/16/windows-susbsystem-for-linux-xfce-4/>`_.
     
   * Next, close any running instance of that X server (VcxSrv). Open
     the folder where you have installed it (e.g., ``C:\Program
     Files\VcXsrv``),
     right click on ``vcxsrv.exe``. Choose `Properties > Compatibility tab > Change high DPI
     settings > Enable Override high DPI scaling` and change it to
     ``Application`` option. Here is the screenshot looks like after
     changing the settings:

.. image:: ../resources/howto/blur.png
   :width: 820px
   :align: center

4. Once you have done all of this, you can run Linux terminal within the
   graphical XFCE shell and execute all commands from it, rather than
   from a Windows-started Ubuntu terminal. In my case, it looks
   as follows:

.. image:: ../resources/howto/xfce.png
   :width: 820px
   :align: center 

5. So far so good, now we have a running Linux, so it's time to install OCaml
   libraries. First, we need to install a number of Linux packages that OCaml
   needs. Run the following lines from Linux terminal (it can be done both from
   within graphical shell, or from within a separate Ubuntu terminal run as a
   Windows applications)::

    sudo apt install make m4 gcc pkg-config libx11-dev fswatch

   Don't forget to enter the password you've created for your Linux account, it
   might be different from your Windows one. Be patient: installing those
   packages will take quite some time.

6. Next, we will install the ``opam`` package manager for working with different
   OCaml libraries. Execute the following lines from Linux terminal::

    sudo add-apt-repository ppa:avsm/ppa
    sudo apt install opam
    opam init -y --compiler=5.1.0 --disable-sandboxing
    eval $(opam env)
    opam install -y dune utop num menhir ocamlformat ocamlformat-rpc ocaml-lsp-server
    opam user-setup install

   Once done, add the following line to the ``~/.bashrc`` file in your WSL/Linux
   (sub)system::

    eval $(opam env) 

   After that, close your terminal window and start a new one.

   To check that your OCaml is correctly installed, run ``ocamlc --version``
   from the terminal. You should get the output ``5.1.0``, which is the version
   of the OCaml compiler we have just installed.

7. We recommend you to use `VSCode <https://code.visualstudio.com/>`_ for your
   OCaml your development, assuming you've done steps 1-6.

   Start by installing the ``Remote-WSL`` plugin. It is the one suggested the
   first time you run VSCode. Alternatively, you can install it by pressing
   ``Ctrl-Shift-P``, typing ``install extensions``, and choosing ``Install
   Extensions`` item from the dropdown menu, and then finding and installing the
   ``Remote-WSL`` extension.

   After installing that extension, press ``Ctrl-Shift-P`` and choose
   ``Remote-WSL: New Window``. This will take a few seconds and will start a new
   window of VSCode that runs **inside your WSL Linux** (you can even start a
   Linux terminal there).

   Next, **in this remote window**, follow the instructions for `VScode`_ setup below.

   Now, you can open an OCaml file (``Ctrl-Shift-P``, followed by "File: Open
   File") and enjoy the advanced features: highlighting, code completion, and
   type information, as well as many others. An example of the UI is shown
   below. Notice the indicators at the bottom of the screen, showing that VSCode
   runs in WSL (Ubuntu), with OCaml support enabled:

.. image:: ../resources/howto/vscode-wsl.png
   :width: 820px
   :align: center


Installing OCaml from Scratch on Linux
--------------------------------------

If you're using Linux, the setup is similar to the one for Windows 10 WSL
described previously. Just follow the points above starting from the step 5. If
you're using a distribution different from Ubuntu, make sure to use the
corresponding package manager (instead of ``apt``) to get the system packages in
the step 5.


Installing LLVM and Clang
-------------------------

For some projectsin this class, we will be using the `LLVM <https://llvm.org/>`_
framework, which you can install as follows:

* Ubuntu or MS Windows 10 with WSL: run ``sudo apt-get update && apt-get install clang``
* macOS option 1: Install command line tools manually by running ``xcode-select --install`` from the terminal
* macOS option 2: Install XCode (via the AppStore) run it, go to ``Preferences``  and
  install the command line tools on the "Locations" panel.
* macOS option 3: Intstall via Homebrew, run ``brew install llvm``.

  
..
   Checking your Setup
   -------------------

   In order to check your set up, please, make sure to email your GitHub
   name to the instructor---this is necessary to grant you GitHub access
   for course-related repositories.

   Once you are done installing/updating OCaml and LLVM, please clone
   `this project <https://github.com/ysc4230/week-01-simple-2021>`_ from
   GitHub---it is private, but you should have access to it if you have
   provided your GitHub name.

   Once cloned, run ``make`` from the project root. You should see the
   output, meaning that your configuration is complete for the class::

    DEFINING O0
    DEFINING O1
    DEFINING O2
    DEFINING O3
    clang -fno-stack-protector -fno-asynchronous-unwind-tables  -O0 -emit-llvm -S -o factorial-O0.ll factorial.c
    clang -fno-stack-protector -fno-asynchronous-unwind-tables  -O0 -S -o factorial-O0.s factorial-O0.ll
    clang -c -o factorial-O0.o factorial-O0.s
    clang -o factorial-O0 factorial-O0.o
    clang -fno-stack-protector -fno-asynchronous-unwind-tables  -O1 -emit-llvm -S -o factorial-O1.ll factorial.c
    clang -fno-stack-protector -fno-asynchronous-unwind-tables  -O1 -S -o factorial-O1.s factorial-O1.ll
    clang -c -o factorial-O1.o factorial-O1.s
    clang -o factorial-O1 factorial-O1.o
    clang -fno-stack-protector -fno-asynchronous-unwind-tables  -O2 -emit-llvm -S -o factorial-O2.ll factorial.c
    clang -fno-stack-protector -fno-asynchronous-unwind-tables  -O2 -S -o factorial-O2.s factorial-O2.ll
    clang -c -o factorial-O2.o factorial-O2.s
    clang -o factorial-O2 factorial-O2.o
    clang -fno-stack-protector -fno-asynchronous-unwind-tables  -O3 -emit-llvm -S -o factorial-O3.ll factorial.c
    clang -fno-stack-protector -fno-asynchronous-unwind-tables  -O3 -S -o factorial-O3.s factorial-O3.ll
    clang -c -o factorial-O3.o factorial-O3.s
    clang -o factorial-O3 factorial-O3.o
    dune build --profile release @install 
    factorial(10) = 3628800  


VSCode
------
  
Regardles of what platform you have, we suggest that you use `VSCode
<https://code.visualstudio.com/>`_ for OCaml development. To do so, after
downloading and installing the VSCode IDE, install the
`OCaml Platform
<https://marketplace.visualstudio.com/items?itemName=ocamllabs.ocaml-platform>`_
which enables OCaml support in VSCode. It assumes that you have installed all libraries
above via ``opam``. 

You can install the extension by pressing ``Command-Shift-P``, typing ``Install
Extensions``, and choosing that item from the dropdown menu.

.. admonition:: Caution

   The extensions named simply “OCaml” or “OCaml and Reason IDE” are *not* the
   right ones. (They are both old and no longer maintained by their developers.)

**Windows only:** make sure you install the extension with the button that says “Install on WSL: …”,
not with a button that says only “Install”. The latter will not work.


.. admonition:: Note

  Make sure that you have install the "ocaml lsp server" and a few helper
  libraries, which support type annotation tool-tips, autocompletion hints, and
  code formatting::

      opam install ocaml-lsp-server ocamlformat ocamlformat-rpc

  (These should have already been installed if you followed the setup instructions above.)
   
Now, if you open a project folder, it will look something like what is shown below.

.. image:: ../resources/howto/vscode-mac.png
   :align: center

**Terminal**

Note the "OCaml" tab at left side of the screen, which should be available once
you have the OCaml Platform plugin installed.  Clicking on it brings up some
OCaml-specific features.  In, particular, you can use it for ``Commands > Open a
sandboxed terminal``, which launches a terminal at the bottom of the IDE.
Whenever you need to use `make`, `dune`, or the `oatc` compiler, you can use
this terminal.

The first thing you should do after importing a project is to run `make test`
from that terminal.  It should succeed (perhaps with warnings about missing
code) and produce test output.
	   
**dune**

VSCode can only provide syntax type tooltypes and code completion hints *after*
the project has successfully compiled (it looks in the ``_build`` directory for
relevant metadata).  Therefore, when editing your project files, it is useful to
have ``dune`` running in "watch" mode so that it looks for changes and rebuilds
the files automatically.  You can do this by running ``dune build -w`` from the
terminal.  (You can stop that process by doing ``CTRL-C``.)

 
FAQ and Troubleshooting
-----------------------

1. **Question**: May I use Emacs for programming in OCaml?

   **Answer**: Of course, you can! This tutorial used to have notes on how to
   configure Emacs/Aquamacs for OCaml, but the experience of the last few years
   has convincingly demonstrated that VSCode is a much simpler and more
   convenient to use alternative, so why don't you give it a try?

2. **Problem**: Merlin is not detected by VSCode, which gives an error
   "``ocamlmerlin`` is not found".

   **Solution**: This is the case if you didn't add ``eval $(opam env)`` to the
   configuration files (e.g., ``~/.bashrc`` and/or ``~/.profile``). Adding it
   and restarting VSCode should fix it.

   Alternatively (not recommended), you can add the following lines to the
   ``settings.json`` file (with your account name instead of ``YOURNAME``). To
   find that file, press ``Command-Shift-P`` and choose "Preferences: Open
   Settings (JSON)" (to find it just type "settings" and choose the correct
   option)::

      "reason.path.ocamlmerlin": "/Users/YOURNAME/.opam/5.1.0/bin/ocamlmerlin"

   For example, in my case the contents of this file look as follows::

      {
          "window.zoomLevel": 2,
          "search.searchOnType": false,
          "reason.path.ocamlmerlin": "/Users/ilya/.opam/5.1.0/bin/ocamlmerlin"
      }

   Don't forget to save the file. 

3. **Problem**: In VSCode, a Git icon in the vertical panel on the left keeps
   blinking with  the "watch" symbol when being updated. 

   **Solution**: Add the following line to your ``settings.json`` file::

      "git.showProgress": false


.. rubric:: Footnotes

.. [#] These instructions were adapted from a version kindly provided by `Ilya Sergey <https://ilyasergey.net/>`_.
